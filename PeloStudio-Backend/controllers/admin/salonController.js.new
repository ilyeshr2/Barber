const { Salon, FileStorage, sequelize } = require('../../models');
const fs = require('fs');
const path = require('path');

exports.updateSalonInfo = async (req, res) => {
    try {
        console.log('updateSalonInfo called with request body:', req.body);
        console.log('Files received:', req.files);
        
        // Start a transaction to ensure data integrity
        const transaction = await sequelize.transaction();
        
        try {
            // Get request body data
            const { name, address, phone, email, description } = req.body;
            
            // Find existing salon or create a new one
            let salon = await Salon.findOne({ transaction });
            console.log('Current salon data from DB:', salon ? salon.toJSON() : 'No salon found');
            
            if (!salon) {
                salon = await Salon.create({
                    name: name || 'Yaniso Studio',
                    address: address || 'Rue Jean-Talon E, Montréal',
                    phone: phone || '+1 438-686-6697',
                    email: email || 'contact@yanisostudio.com',
                    description: description || 'Yaniso Studio est votre barbier de confiance à Montréal.',
                    logo_url: '/uploads/salon/default-logo.png',
                    image_url: '/uploads/salon/default-salon.jpg'
                }, { transaction });
                console.log('Created new salon record:', salon.toJSON());
            } else {
                // Update text fields if provided
                let updated = false;
                if (name) { 
                    salon.name = name; 
                    updated = true;
                }
                if (address) { 
                    salon.address = address; 
                    updated = true;
                }
                if (phone) { 
                    salon.phone = phone; 
                    updated = true;
                }
                if (email) { 
                    salon.email = email; 
                    updated = true;
                }
                if (description) { 
                    salon.description = description; 
                    updated = true;
                }
                if (updated) {
                    console.log('Text fields updated');
                }
            }
            
            // Handle file uploads
            const files = req.files || {};
            
            // Create uploads directory if it doesn't exist
            const uploadDir = path.join(__dirname, '../../uploads/salon');
            if (!fs.existsSync(uploadDir)) {
                fs.mkdirSync(uploadDir, { recursive: true });
            }
            
            // Handle logo upload
            if (files.logo && files.logo[0]) {
                console.log('Processing logo file:', files.logo[0].originalname);
                const logoFile = files.logo[0];
                const logoFileName = `${Date.now()}-logo-${path.basename(logoFile.originalname)}`;
                const logoFilePath = path.join(uploadDir, logoFileName);
                
                // Move file from temp location to salon directory
                fs.renameSync(logoFile.path, logoFilePath);
                console.log('Logo file moved to:', logoFilePath);
                
                // Store file metadata in database
                const logoFileData = await FileStorage.create({
                    original_name: logoFile.originalname,
                    file_path: `/uploads/salon/${logoFileName}`,
                    file_size: logoFile.size,
                    mime_type: logoFile.mimetype,
                    category: 'salon',
                    upload_date: new Date()
                }, { transaction });
                console.log('Logo file metadata saved:', logoFileData.toJSON());
                
                // Delete old logo if it's not the default
                if (salon.logo_url && !salon.logo_url.includes('default-logo') && fs.existsSync(path.join(__dirname, '../../', salon.logo_url))) {
                    fs.unlinkSync(path.join(__dirname, '../../', salon.logo_url));
                    console.log('Old logo deleted:', salon.logo_url);
                }
                
                // Update the logo_url field
                const oldLogoUrl = salon.logo_url;
                salon.logo_url = logoFileData.file_path;
                console.log(`Salon logo_url updated from "${oldLogoUrl}" to "${salon.logo_url}"`);
            }
            
            // Handle image upload
            if (files.image && files.image[0]) {
                console.log('Processing image file:', files.image[0].originalname);
                const imageFile = files.image[0];
                const imageFileName = `${Date.now()}-image-${path.basename(imageFile.originalname)}`;
                const imageFilePath = path.join(uploadDir, imageFileName);
                
                // Move file from temp location to salon directory
                fs.renameSync(imageFile.path, imageFilePath);
                console.log('Image file moved to:', imageFilePath);
                
                // Store file metadata in database
                const imageFileData = await FileStorage.create({
                    original_name: imageFile.originalname,
                    file_path: `/uploads/salon/${imageFileName}`,
                    file_size: imageFile.size,
                    mime_type: imageFile.mimetype,
                    category: 'salon',
                    upload_date: new Date()
                }, { transaction });
                console.log('Image file metadata saved:', imageFileData.toJSON());
                
                // Delete old image if it's not the default
                if (salon.image_url && !salon.image_url.includes('default-salon') && fs.existsSync(path.join(__dirname, '../../', salon.image_url))) {
                    fs.unlinkSync(path.join(__dirname, '../../', salon.image_url));
                    console.log('Old image deleted:', salon.image_url);
                }
                
                // Update the image_url field
                const oldImageUrl = salon.image_url;
                salon.image_url = imageFileData.file_path;
                console.log(`Salon image_url updated from "${oldImageUrl}" to "${salon.image_url}"`);
            }
            
            // Save the updated salon information
            const result = await salon.save({ transaction });
            console.log('Salon data saving result:', result ? 'Success' : 'Failed');
            
            // All operations succeeded, commit the transaction
            await transaction.commit();
            console.log('Transaction committed, all changes saved');
            
            // Return the updated salon data
            console.log('Salon data saved successfully:', salon.toJSON());
            res.status(200).json(salon);
        } catch (error) {
            // Roll back the transaction in case of error
            await transaction.rollback();
            console.error('Transaction rolled back due to error:', error);
            throw error; // Re-throw for outer catch block
        }
    } catch (error) {
        console.error('Error updating salon info:', error);
        
        // Clean up uploaded files if there was an error
        if (req.files) {
            Object.values(req.files).flat().forEach(file => {
                if (fs.existsSync(file.path)) {
                    fs.unlinkSync(file.path);
                    console.log('Cleaned up temp file after error:', file.path);
                }
            });
        }
        
        res.status(500).json({ message: 'Server error while updating salon information' });
    }
};

exports.updateBusinessHours = async (req, res) => {
    try {
        // Get business hours from request body
        const { business_hours } = req.body;
        
        // Validate business hours format
        if (!business_hours || !Array.isArray(business_hours) || business_hours.length !== 7) {
            return res.status(400).json({ 
                message: 'Invalid business hours format. Must be an array of 7 days with day_of_week, is_open, open_time, and close_time'
            });
        }
        
        // Validate each day's data
        for (const day of business_hours) {
            if (
                typeof day.day_of_week !== 'number' || 
                day.day_of_week < 0 || 
                day.day_of_week > 6 ||
                typeof day.is_open !== 'boolean' ||
                typeof day.open_time !== 'string' ||
                typeof day.close_time !== 'string'
            ) {
                return res.status(400).json({ 
                    message: 'Invalid day format. Each day must have day_of_week (0-6), is_open (boolean), open_time (string), and close_time (string)'
                });
            }
        }
        
        // Find existing salon
        const salon = await Salon.findOne();
        if (!salon) {
            return res.status(404).json({ message: 'Salon not found' });
        }
        
        // Import the BusinessHours model
        const { BusinessHours } = require('../../models');
        
        // Update business hours in the BusinessHours table
        for (const day of business_hours) {
            await BusinessHours.update(
                {
                    is_open: day.is_open,
                    open_time: day.open_time,
                    close_time: day.close_time
                },
                {
                    where: {
                        salon_id: salon.id,
                        day_of_week: day.day_of_week
                    }
                }
            );
        }
        
        // Get updated business hours
        const updatedHours = await BusinessHours.findAll({
            where: { salon_id: salon.id },
            order: [['day_of_week', 'ASC']]
        });
        
        res.status(200).json({ business_hours: updatedHours });
    } catch (error) {
        console.error('Error updating business hours:', error);
        res.status(500).json({ message: 'Server error while updating business hours' });
    }
}; 